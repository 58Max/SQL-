## SQL优化



## type(访问类型)

- all
- index
- range
- ref
- eq_ref
- const,system
- null

> 从上到下的性能由差到好



（1）type= all 全表扫描 遍历全表来找到匹配的行 这里指的是*

```mysql
select * from file where rating > 9;
```

（2）type = index 索引全扫描 遍历整个索引来查询匹配的行  这里指的是 title字段

```mysql
select title from file
```

（3）type = range 索引范围扫描 常见于 <、<=、> 、>= 、between 等操作符

这里指的是 where后面的一个范围 ，和（1）相比就是在一个确定的范围内

```mysql
select * from payment where customer_id >= 300 and customer_id <=450;
```

（4）type =ref 使用非唯一索引扫描或者唯一索引的前缀扫描。返回匹配某个单独值的记录行  这里指的是 where后有一个确定值

因为这个 idx_fk_customer_id 是非唯一索引值

```mysql
mysql> explain select * from payment where customer_id = 350\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: payment
   partitions: NULL
         type: ref
possible_keys: idx_fk_customer_id
          key: idx_fk_customer_id
      key_len: 2
          ref: const
         rows: 23
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.00 sec)

```

（5）type = eq_ref 区别就在使用的索引是唯一索引，对于每个索引值，表中只有一条记录匹配；简单来说就是多表连接中使用primary key或者unique index 作为关联条件

```mysql
mysql> explain select * from film a,film_text b where a.film_id = b.film_id \G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: b
   partitions: NULL
         type: ALL
possible_keys: PRIMARY
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 1000
     filtered: 100.00
        Extra: NULL
*************************** 2. row ***************************
           id: 1
  select_type: SIMPLE
        table: a
   partitions: NULL
         type: eq_ref
possible_keys: PRIMARY
          key: PRIMARY
      key_len: 2
          ref: sakila.b.film_id
         rows: 1
     filtered: 100.00
        Extra: Using where
2 rows in set, 1 warning (0.00 sec)

```

(6) type = const/ststem   单表中最多有一个匹配行，查询起来十分迅速，所以这个匹配行中的其他的值可以被优化器在当前查询中当做常量来处理。例如根据主键  primary key或者唯一索引unique index 进行的查询



### MySQL 唯一索引和非唯一索引（普通索引）区别

如果在一个列上同时建唯一索引和普通索引的话，mysql 会自动选择唯一索引
唯一索引和普通索引使用的结构都是 B-tree，执行时间复杂度都是 O(log n)

#### 普通索引（非唯一索引）

普通索引（由关键字 KEY 或 INDEX 定义的索引）的唯一任务是加快对数据的访问速度。因此，应该只为那些最经常出现在查询条件（WHERE column =）或排序条件（ORDER BY column）中的数据列创建索引。只要有可能，就应该选择一个数据最整齐、最紧凑的数据列（如一个整数类型的数据列）来创建索引

#### 唯一索引

普通索引允许被索引的数据列包含重复的值

如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字 UNIQUE 把它定义为一个唯一索引。这么做的好处：一是简化了 MySQL 对这个索引的管理工作，这个索引也因此而变得更有效率（区分度：distinct * / count (*) 高）；二是 MySQL 会在有新记录插入数据表时，自动检查新记录的这个字段的值是否已经在某个记录的这个字段里出现过了；如果是，MySQL 将拒绝插入那条新记录。也就是说，唯一索引可以保证数据记录的唯一性。事实上，在许多场合，人们创建唯一索引的目的往往不是为了提高访问速度，而只是为了避免数据出现重复

#### 主键索引

主键索引是唯一索引的特殊类型
数据库表通常有一列或列组合，其值用来唯一标识表中的每一行。该列称为表的主键
在数据库关系图中为表定义一个主键将自动创建主键索引，主键索引是唯一索引的特殊类型。主键索引要求主键中的每个值是唯一的。当在查询中使用主键索引时，它还允许快速访问数据

它们的一些比较：
(1) 对于主键 MySQL 会自动建立唯一索引；
(2) 主键不一定只包含一个字段，所以可以在主键的其中一个字段建唯一索引；
(3) 主键可作外键，唯一索引不可；
(4) 主键不可为空，唯一索引可；
(5) 主键也可是多个字段的组合；

#### 主键与唯一索引不同的是：

主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。

主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。

唯一性索引列允许空值，而主键列不允许为空值。

主键列在创建时，已经默认为空值 + 唯一索引了。

主键可以被其他表引用为外键，而唯一索引不能。

一个表最多只能创建一个主键，但可以创建多个唯一索引。

主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。



## MySQL中能够使用索引的经典场景

(1) 匹配全值，对索引中所有列都指定具体值，即是对索引中的所有列都有等值匹配的条件。

```mysql
mysql> explain select * from rental where rental_date='2005-05-25 17:22:10' and inventory_id = 373 and cusstomer_id = 343 \G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: rental
   partitions: NULL
         type: const
possible_keys: rental_date,idx_fk_inventory_id,idx_fk_customer_id
          key: rental_date
      key_len: 10
          ref: const,const,const
         rows: 1
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.00 sec)

```



访问类型是type = const 表示常量。

可以观察出可能作为索引的有三个

rental_date,idx_fk_inventory_id,idx_fk_customer_id

但是 优化器选择的索引是rental_date进行扫描



（2） 匹配值的范围查询，对索引值能够进行范围查找。

```mysql
ysql> explain select * from payment where customer_id >=300 and customer_id <= 350\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: payment
   partitions: NULL
         type: range
possible_keys: idx_fk_customer_id
          key: idx_fk_customer_id
      key_len: 2
          ref: NULL
         rows: 1350
     filtered: 100.00
        Extra: Using index condition
1 row in set, 1 warning (0.00 sec)

```

可以观察出访问类型是type = range；

可能的索引是 idx_fk_customer_id 但是优化器实际使用的索引是idx_fk_customer_id而且Extra: Using index condition表示还使用了这个来加速访问查询数据



(3)匹配最左前缀，仅仅使用索引中的最左列进行查找

```mysql
mysql> alter table payment add index idx_payment_date(payment_date, amount,last_update);
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> explain select * from payment where payment_date = '2006-02-14 15:16:03' and last_update = '2006-02-15 22:12:32'\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: payment 
   partitions: NULL
         type: ref
possible_keys: idx_payment_date
          key: idx_payment_date
      key_len: 5
          ref: const
         rows: 182
     filtered: 10.00
        Extra: Using index condition
1 row in set, 1 warning (0.00 sec)

```

首先设置了联合索引 idx_payment_date(payment_date, amount,last_update)

但是查询索引中只包含了联合索引中的第一个和第三个索引，但是我们可以看到key和Extra优化器使用的依旧是联合索引

但是当使用联合索引中的第二个和第三个当做查询索引的时候

```mysql
mysql> explain select * from payment where amount = 3.98 and last_update ='2006-02-15 22:12:32'\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: payment
   partitions: NULL
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 16086
     filtered: 1.00
        Extra: Using where
1 row in set, 1 warning (0.00 sec)

```

访问类型是type= all  ，key = null  ，Extra: Using where

说明优化器并没有使用到连接索引进行优化查询

这就是最左匹配原则，算是MySQL中B-Tree索引使用的首要原则

最左匹配原则：当查询索引中含有联合索引最左面（第一个）索引的时候优化器

就会使用联合索引就行优化查询



（4） 仅仅对索引进行查询，当查询的列都在索引的字段中时，查询的效率更高

查询的 ==last_update==是联合索引中的一个字段

```mysql
mysql> explain select last_update from payment where payment_date = '2006-02-14 15:16:03' and amount = 3.98\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: payment
   partitions: NULL
         type: ref
possible_keys: idx_payment_date
          key: idx_payment_date
      key_len: 8
          ref: const,const
         rows: 8
     filtered: 100.00
        Extra: Using index
1 row in set, 1 warning (0.00 sec)

```

由上面可看出 使用的索引依旧是联合索引但是 Extra: Using index 使用的确实索引，意味着直接访问索引便可以获得所需要的数据，不需要索引就可以回表，减少了不必要的数据访问提高了效率



（5）匹配列前缀，仅仅使用索引的第一列，并且只包含索引的第一列的开头一部分查找。

```mysql
mysql> create index idx_title_desc_part on film_text (title(10),description(20));
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> explain select title from film_text where title like 'AFRICAN%'\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: film_text
   partitions: NULL
         type: range
possible_keys: idx_title_desc_part,idx_title_description
          key: idx_title_desc_part
      key_len: 32
          ref: NULL
         rows: 1
     filtered: 100.00
        Extra: Using where
1 row in set, 1 warning (0.00 sec)

```

从执行过程中可以看出使用的索引是自定义的前缀索引

 key: idx_title_desc_part

Extra: Using where 表示优化器需要通过索引回表查询数据

（6）能够实现索引匹配部分精确而其他部分进行范围匹配

```mysql
mysql> explain select inventory_id from rental where rental_date='2020-02-14 15:16:03' and customer_id >=300 and customer_id <= 400 \G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: rental
   partitions: NULL
         type: ref
possible_keys: rental_date,idx_fk_customer_id
          key: rental_date
      key_len: 5
          ref: const
         rows: 1
     filtered: 16.85
        Extra: Using where; Using index
1 row in set, 1 warning (0.00 sec)

```

 type: ref 说明优化器选择时间查询

key: rental_date 说明优化器使用索引rental_date 帮助快速查询

由于只查询inventory_id的值，所以

Extra: Using where; Using index

使用index做回表查询

(7) 如果列名是索引，那么使用column_name（字段名称） is null就会使用索引

```mysql
mysql> explain select * from payment where rental_id is null \G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: payment
   partitions: NULL
         type: ref
possible_keys: fk_payment_rental
          key: fk_payment_rental
      key_len: 5
          ref: const
         rows: 7
     filtered: 100.00
        Extra: Using index condition
1 row in set, 1 warning (0.00 sec)

```



## 存在索引但是不能使用索引的经典索引

（1）以%开头的like查询不能够利用B-tree索引，执行计划中的key的值为null                          表示没有使用索引

```mysql
mysql> explain select * from actor where last_name like '%NI%' \G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: actor
   partitions: NULL
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 199
     filtered: 11.11
        Extra: Using where
1 row in set, 1 warning (0.00 sec)
```

从执行计划中可以看出并没有使用索引

因为B-tree索引的结构，所以%开头的查询自然就没法使用索引了，一般是使用全文检索来解决类似的全文检索问题或者考虑领用InnoDB的表都是聚簇表的特点，采取更轻量的解决方式。因为一般情况下索引都会比表更小，扫描索引会比扫描更加快速

```mysql
mysql> explain select * from (select actor_id from actor where last_name like '%NI%') a,actor b where a.actor_id = b.actor_id\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: actor
   partitions: NULL
         type: index
possible_keys: PRIMARY
          key: idx_actor_last_name
      key_len: 137
          ref: NULL
         rows: 199
     filtered: 11.11
        Extra: Using where; Using index
*************************** 2. row ***************************
           id: 1
  select_type: SIMPLE
        table: b
   partitions: NULL
         type: eq_ref
possible_keys: PRIMARY
          key: PRIMARY
      key_len: 2
          ref: sakila.actor.actor_id
         rows: 1
     filtered: 100.00
        Extra: NULL
2 rows in set, 1 warning (0.00 sec)
```

从执行计划中可以看出，内层的Using index代表使用索引覆盖扫描，之后通过主键join操作去演员表actor中获取最终的查询结果。

两者的区别：因为B-tree的索引结构导致%开头的查询没法利用索引就只能够扫描全表自然会比扫描索引的操作浪费时间，我们可以通过其他的操作把这个查询语句变成使用索引的的查询语句

（2）数据类型出现隐式转换的时候也不会使用索引，特别是当类的类型是字符串，那么一定记得在where条件中把字符常量值使用引号引起来否则即便在这个列上存在索引，mysql也不会用到，因为Mysql默认把输入的常量值进行转换以后才进行索引。进行的是全表扫描\

首先我们想先看一下actor表的字段结构

```mysql\
+-------------+----------------------+------+-----+-------------------+-----------------------------+
| Field       | Type                 | Null | Key | Default           | Extra                       |
+-------------+----------------------+------+-----+-------------------+-----------------------------+
| actor_id    | smallint(5) unsigned | NO   | PRI | NULL              | auto_increment              |
| first_name  | varchar(45)          | NO   |     | NULL              |                             |
| last_name   | varchar(45)          | NO   | MUL | NULL              |                             |
| last_update | timestamp            | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
+-------------+----------------------+------+-----+-------------------+-----------------------------+
4 rows in set (0.00 sec)

```



```mysql
       id: 1
  select_type: SIMPLE
        table: actor
   partitions: NULL
         type: ALL
possible_keys: idx_actor_last_name
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 199
     filtered: 10.00
        Extra: Using where
1 row in set, 3 warnings (0.00 sec)
```

可以看出并没有使用索引查询，使用的是索引查询

```mysql
        id: 1
  select_type: SIMPLE
        table: actor
   partitions: NULL
         type: ref
possible_keys: idx_actor_last_name
          key: idx_actor_last_name
      key_len: 137
          ref: const
         rows: 1
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.00 sec)
```

这里不需要进行字段数据类型的数据转化，索引就会使用索引查询

（3）复合索引的情况，假如查询条件中不包含索引列最左边的情况也不会遵循最左查询的原则

```msyql
mysql> explain select * from payment where amount = 3.98 and last_update='2006-02-15 22:12:32'\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: payment
   partitions: NULL
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 16086
     filtered: 1.00
        Extra: Using where
1 row in set, 1 warning (0.00 sec)
```

最左原则 看前面 前面有介绍的

(4)如果mysql估计使用索引比全表查询个更慢则不使用索引

这个就不写了

（5）用or分隔开的条件 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到

```mysql
mysql> explain select * from payment where customer_id =203 or amount = 3.96\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: payment
   partitions: NULL
         type: ALL
possible_keys: idx_fk_customer_id
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 16086
     filtered: 10.15
        Extra: Using where
1 row in set, 1 warning (0.00 sec)

```

因为or后面的不存在那个索引，索引后面的查询肯定走的是全表查询。